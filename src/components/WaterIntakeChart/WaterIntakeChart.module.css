.graphContainer {
    margin: 0 auto;
    width: 313px;
    height: 253px;
}

@media screen and (min-width: 768px) {
    .graphContainer {
        width: 588px;
        height: 273px;
    }
    .waterDropImg {
        width: 80px;
        height: 48px;
    }
  }
  /* //================== fetchWeeklyWater ==================
      .addCase(fetchWeeklyWater.pending, (state) => {
        state.waterWeekly.isLoading = true;
        state.waterWeekly.errorMessage = null;
        state.waterWeekly.successMessage = null;
      })
      .addCase(fetchWeeklyWater.fulfilled, (state, action) => {
        state.waterWeekly.isLoading = false;
        state.waterWeekly.successMessage = action.payload.message;
        state.waterWeekly.data = action.payload.data;
      })
      .addCase(fetchWeeklyWater.rejected, (state, action) => {
        state.waterWeekly.isLoading = false;
        state.waterWeekly.errorMessage = action.payload.data.message;
      }) */

      /* waterWeekly: {
        data: [],
        isLoading: false,
        errorMessage: null,
      }, */

/* //================= GET WEEKLY WATER =================

export const fetchWeeklyWater = createAsyncThunk(
  "water/fetchWeek",
  async (formData, thunkAPI) => {
    try {
      const { data } = await getWeekWater(formData);
      return data;
    } catch (error) {
      return thunkAPI.rejectWithValue(error.response.data || error.message);
    }
  }
); */
/* export const getWeekWater = async (date) => {
    const data = await instance.get(`/water/week/${date}`);
    return data;
  }; */
  /* export const selectWaterWeeklyRecord = (state) =>
  state.water.waterWeekly.data; */