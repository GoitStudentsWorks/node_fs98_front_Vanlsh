{"version":3,"file":"Calendar-D7jKfnyH.js","sources":["../../src/components/CalendarItem/CalendarItem.jsx","../../src/components/Calendar/Calendar.jsx"],"sourcesContent":["import { useNavigate } from \"react-router-dom\";\nimport css from \"./CalendarItem.module.css\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchDailyWater } from \"../../redux/water/operations\";\nimport { useParams } from \"react-router-dom\";\nimport { parseDateTime } from \"../../helpers/parseDate.js\";\nimport clsx from \"clsx\";\nimport { selectWaterRate } from \"../../redux/auth/selectors.js\";\n\nconst isFuture = (date) => {\n  const dateNow = new Date();\n  const currentDate = new Date(Number(date));\n  dateNow.setHours(23);\n  dateNow.setMinutes(59);\n  dateNow.setSeconds(59);\n  dateNow.setMilliseconds(999);\n  return dateNow.getTime() < currentDate.getTime();\n};\n\nconst isDaySame = (firstDay, secondDay) => {\n  const first = new Date(Number(firstDay));\n  const second = new Date(Number(secondDay));\n\n  return (\n    first.getFullYear() === second.getFullYear() &&\n    first.getMonth() === second.getMonth() &&\n    first.getDate() === second.getDate()\n  );\n};\n\nconst CalendarItem = ({ calendarDate, amount }) => {\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const goal = useSelector(selectWaterRate);\n  const { date: paramsDate } = useParams();\n  const currentDate = parseDateTime(paramsDate);\n\n  const handleClick = (calendarDate) => {\n    navigate(`/tracker/${calendarDate}`);\n    dispatch(fetchDailyWater(calendarDate));\n  };\n\n  const date = new Date(Number(calendarDate)).getDate();\n\n  const percent =\n    goal > 0 ? Math.round((amount / (goal * 1000)) * 100) : amount;\n  const isDisabled = isFuture(calendarDate);\n\n  const isDane = Math.round(percent) < 100;\n  const isActive = isDaySame(currentDate, calendarDate);\n  const percentString = Math.round(percent) >= 100 ? \"100%\" : `${percent}%`;\n\n  return (\n    <button\n      className={clsx(css.day, {\n        [css.disabled]: isDisabled,\n      })}\n      disabled={isDisabled}\n      onClick={() => handleClick(calendarDate)}\n    >\n      <div\n        className={clsx(css.date, {\n          [css.perc_filled]: isDane,\n          [css.active]: isActive,\n        })}\n      >\n        {date}\n      </div>\n      <div className={css.perc}>{percentString}</div>\n    </button>\n  );\n};\n\nexport default CalendarItem;\n","import { useSelector } from \"react-redux\";\nimport {\n  selectWaterMonthlyRecord,\n  selectMonthlyIsLoading,\n  selectMonthlyIsError,\n} from \"../../redux/water/selectors.js\";\nimport Loader from \"../Loader/Loader.jsx\";\n\nimport css from \"./Calendar.module.css\";\nimport CalendarItem from \"../CalendarItem/CalendarItem.jsx\";\nimport { useTranslation } from \"react-i18next\";\n\nconst Calendar = () => {\n  const { t } = useTranslation();\n  const dateArray = useSelector(selectWaterMonthlyRecord);\n  const isLoading = useSelector(selectMonthlyIsLoading);\n  const isError = useSelector(selectMonthlyIsError);\n\n  if (isLoading) return <Loader />;\n\n  if (isError)\n    return (\n      <div className={css.container}>\n        <h2 className={css.errorMessage}>{t(\"waterMonthErrorMessage\")}</h2>\n      </div>\n    );\n  return (\n    <div className={css.container}>\n      <ul className={css.calendarList}>\n        {dateArray.map((eachDate, index) => (\n          <li key={index}>\n            <CalendarItem\n              index={index}\n              calendarDate={eachDate.date}\n              amount={eachDate.amount}\n            />\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default Calendar;\n"],"names":["isFuture","date","dateNow","currentDate","isDaySame","firstDay","secondDay","first","second","CalendarItem","calendarDate","amount","navigate","useNavigate","dispatch","useDispatch","goal","useSelector","selectWaterRate","paramsDate","useParams","parseDateTime","handleClick","fetchDailyWater","percent","isDisabled","isDane","isActive","percentString","jsxs","clsx","css","jsx","Calendar","t","useTranslation","dateArray","selectWaterMonthlyRecord","isLoading","selectMonthlyIsLoading","isError","selectMonthlyIsError","Loader","eachDate","index"],"mappings":"ybASMA,EAAYC,GAAS,CACnB,MAAAC,MAAc,KACdC,EAAc,IAAI,KAAK,OAAOF,CAAI,CAAC,EACzC,OAAAC,EAAQ,SAAS,EAAE,EACnBA,EAAQ,WAAW,EAAE,EACrBA,EAAQ,WAAW,EAAE,EACrBA,EAAQ,gBAAgB,GAAG,EACpBA,EAAQ,QAAA,EAAYC,EAAY,QAAQ,CACjD,EAEMC,EAAY,CAACC,EAAUC,IAAc,CACzC,MAAMC,EAAQ,IAAI,KAAK,OAAOF,CAAQ,CAAC,EACjCG,EAAS,IAAI,KAAK,OAAOF,CAAS,CAAC,EAEzC,OACEC,EAAM,YAAY,IAAMC,EAAO,YAAA,GAC/BD,EAAM,SAAA,IAAeC,EAAO,SAC5B,GAAAD,EAAM,QAAQ,IAAMC,EAAO,SAE/B,EAEMC,EAAe,CAAC,CAAE,aAAAC,EAAc,OAAAC,KAAa,CACjD,MAAMC,EAAWC,IACXC,EAAWC,IACXC,EAAOC,EAAYC,CAAe,EAClC,CAAE,KAAMC,CAAW,EAAIC,EAAU,EACjCjB,EAAckB,EAAcF,CAAU,EAEtCG,EAAeZ,GAAiB,CAC3BE,EAAA,YAAYF,CAAY,EAAE,EAC1BI,EAAAS,EAAgBb,CAAY,CAAC,CAAA,EAGlCT,EAAO,IAAI,KAAK,OAAOS,CAAY,CAAC,EAAE,UAEtCc,EACJR,EAAO,EAAI,KAAK,MAAOL,GAAUK,EAAO,KAAS,GAAG,EAAIL,EACpDc,EAAazB,EAASU,CAAY,EAElCgB,EAAS,KAAK,MAAMF,CAAO,EAAI,IAC/BG,EAAWvB,EAAUD,EAAaO,CAAY,EAC9CkB,EAAgB,KAAK,MAAMJ,CAAO,GAAK,IAAM,OAAS,GAAGA,CAAO,IAGpE,OAAAK,EAAA,KAAC,SAAA,CACC,UAAWC,EAAKC,EAAI,IAAK,CACvB,CAACA,EAAI,QAAQ,EAAGN,CAAA,CACjB,EACD,SAAUA,EACV,QAAS,IAAMH,EAAYZ,CAAY,EAEvC,SAAA,CAAAsB,EAAA,IAAC,MAAA,CACC,UAAWF,EAAKC,EAAI,KAAM,CACxB,CAACA,EAAI,WAAW,EAAGL,EACnB,CAACK,EAAI,MAAM,EAAGJ,CAAA,CACf,EAEA,SAAA1B,CAAA,CACH,EACC+B,EAAA,IAAA,MAAA,CAAI,UAAWD,EAAI,KAAO,SAAcH,EAAA,CAAA,CAAA,CAAA,CAG/C,EC3DMK,EAAW,IAAM,CACf,KAAA,CAAE,EAAAC,GAAMC,IACRC,EAAYnB,EAAYoB,CAAwB,EAChDC,EAAYrB,EAAYsB,CAAsB,EAC9CC,EAAUvB,EAAYwB,CAAoB,EAE5C,OAAAH,EAAkBN,EAAAA,IAACU,EAAO,CAAA,CAAA,EAE1BF,EAECR,EAAAA,IAAA,MAAA,CAAI,UAAWD,EAAI,UAClB,SAAAC,MAAC,KAAG,CAAA,UAAWD,EAAI,aAAe,SAAEG,EAAA,wBAAwB,EAAE,CAChE,CAAA,QAGD,MAAI,CAAA,UAAWH,EAAI,UAClB,eAAC,KAAG,CAAA,UAAWA,EAAI,aAChB,WAAU,IAAI,CAACY,EAAUC,UACvB,KACC,CAAA,SAAAZ,EAAA,IAACvB,EAAA,CACC,MAAAmC,EACA,aAAcD,EAAS,KACvB,OAAQA,EAAS,MAAA,CAJZ,CAAA,EAAAC,CAMT,CACD,CACH,CAAA,CACF,CAAA,CAEJ"}